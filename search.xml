<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tower of Hanoi</title>
    <url>/2020/06/25/Tower-of-Hanoi/</url>
    <content><![CDATA[<p><img src="https://wdd.js.org/img/images/20180208212257_BZZjA5_1200px-The_Great_Wave_off_Kanagawa.jpeg" alt=""></p>
<p>待更新</p>
<a id="more"></a>

<p>文章正文</p>
]]></content>
      <tags>
        <tag>recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2020/06/24/hello-world/</url>
    <content><![CDATA[<p>插入图片</p>
<a id="more"></a>


<p>xxxxxxxxxxxx</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 204</title>
    <url>/2020/06/27/204/</url>
    <content><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/94/Animation_Sieve_of_Eratosth.gif" alt=""></p>
<a id="more"></a>

<h5 id="204-Count-Primes-质数的个数"><a href="#204-Count-Primes-质数的个数" class="headerlink" title="204 Count  Primes 质数的个数"></a>204 Count  Primes 质数的个数</h5><p>Count the number of prime numbers less than a non-negative number, <strong><em>n\</em></strong>. 求小于n的质数的个数</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.</span><br></pre></td></tr></table></figure>

<p>解题思路：质数：一个大于1的自然数中，除了1和此数本身外，没有被其他自然数整除的数</p>
<ol>
<li><p>The number 1 is neither prime nor composite.</p>
</li>
<li><p>if n is a postive integer that does not have a prime divisor less than sqrt(n), the n is prime.</p>
<p>举例：101 是质数吗？</p>
<p>the prime less than sqrt(101) : 2,3,5,7</p>
<p>但是101 都不能被2，3，5，7 整除， 所以101 是prime</p>
</li>
</ol>
<p>​       举例： 1147 是质数吗？</p>
<p>​       the prime less than sqrt(1147) : 2,3,5,7,11,13,17,23,29,31</p>
<p>​      1147=31*37,所以1147 是质数</p>
<ol start="3">
<li><p>if n is a composite postive integer, then n has a prime divior less than sqrt(n)</p>
<p><a href="http://zh.wikipedia.org/wiki/埃拉托斯特尼筛法" target="_blank" rel="noopener">埃拉托斯特尼筛法 Sieve of Eratosthenes</a> ：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res=[<span class="literal">True</span>]*n</span><br><span class="line">        res[<span class="number">0</span>],res[<span class="number">1</span>]=<span class="literal">False</span>,<span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">            <span class="keyword">if</span> res[i]==<span class="literal">True</span>:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i*i,n,i):</span><br><span class="line">                    res[j]=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> sum(res)</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>leetcode205 Isomorphic Strings</title>
    <url>/2020/07/07/leetcode205%20Isomorphic%20Strings/</url>
    <content><![CDATA[<p>Given two strings <strong><em>s</em></strong> and <strong><em>t</em></strong>, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in <strong><em>s</em></strong> can be replaced to get <strong><em>t</em></strong>.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;egg&quot;, t &#x3D; &quot;add&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<h5 id="209-Word-Pattern"><a href="#209-Word-Pattern" class="headerlink" title="209 Word Pattern"></a>209 Word Pattern</h5><p>用到的语法：</p>
<p>python string <strong>split() method</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt = <span class="string">"welcome to the jungle"</span></span><br><span class="line"></span><br><span class="line">x = txt.split()</span><br><span class="line"></span><br><span class="line">[<span class="string">'welcome'</span>, <span class="string">'to'</span>, <span class="string">'the'</span>, <span class="string">'jungle'</span>]</span><br></pre></td></tr></table></figure>



<p><strong>solution 1: Two Hash Maps</strong></p>
<p><code>pattern</code>: ‘abba’</p>
<p><code>str</code>: ‘dog cat fish dog’</p>
<p><code>pattern_dict</code> = {a:0, b:1}</p>
<p><code>str_dict</code> = {dog:0, cat:1, fish:2}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern: str, str: str)</span> -&gt; bool:</span></span><br><span class="line">        pattern_dict = &#123;&#125;</span><br><span class="line">        str_dict = &#123;&#125;</span><br><span class="line">        str_word = str.split()</span><br><span class="line">        <span class="keyword">if</span> len(pattern) != len(str_word):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pattern)):</span><br><span class="line">            <span class="keyword">if</span> pattern[i] <span class="keyword">not</span> <span class="keyword">in</span> pattern_dict:</span><br><span class="line">                pattern_dict[pattern[i]] = i</span><br><span class="line">            <span class="keyword">if</span> str_word[i] <span class="keyword">not</span> <span class="keyword">in</span> str_dict:</span><br><span class="line">                str_dict[str_word[i]] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pattern)):</span><br><span class="line">            <span class="keyword">if</span> pattern_dict[pattern[i]] != str_dict[str_word[i]]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<p><strong>solution 2:  Single Index Hash Map</strong></p>
<p><code>pattern</code>: ‘abba’</p>
<p><code>str</code>: ‘dog cat fish dog’</p>
<p><code>map_index</code>={ a:0 , dog:0 , b:1 , cat:1 , fish:2}</p>
<p>index of ‘b’ and index of ‘fish’ are NOT the same. Returns <code>False</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern: str, str: str)</span> -&gt; bool:</span></span><br><span class="line">        map_index = &#123;&#125;</span><br><span class="line">        words = str.split()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(pattern) != len(words):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words)):</span><br><span class="line">            c = pattern[i]</span><br><span class="line">            w = words[i]</span><br><span class="line"></span><br><span class="line">            char_key = <span class="string">'char_&#123;&#125;'</span>.format(c)</span><br><span class="line">            char_word = <span class="string">'word_&#123;&#125;'</span>.format(w)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> char_key <span class="keyword">not</span> <span class="keyword">in</span> map_index:</span><br><span class="line">                map_index[char_key] = i</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> char_word <span class="keyword">not</span> <span class="keyword">in</span> map_index:</span><br><span class="line">                map_index[char_word] = i </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> map_index[char_key] != map_index[char_word]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p> 关于这里为什么要把char和string 区别开来：</p>
<p>如果不区别的话，</p>
<p>pattern=”abc”<br>str=”b c a”</p>
<p><em>Differentiating between character and string:</em> In Python there is no separate <code>char</code> type. And for cases such as:</p>
<p>pattern: ‘abba’ str: ‘b a a b’</p>
<p>Using the same hash map will not work properly. A workaround is to prefix each character in <code>pattern</code> with “char_” and each word in <code>str</code> with “word_”.</p>
<p><strong>solution 3:</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern, str)</span>:</span></span><br><span class="line">    s = pattern</span><br><span class="line">    t = str.split()</span><br><span class="line">    <span class="keyword">return</span> len(set(zip(s, t))) == len(set(s)) == len(set(t)) <span class="keyword">and</span> len(s) == len(t)</span><br></pre></td></tr></table></figure>







<h5 id="205-Isomorphic-Strings"><a href="#205-Isomorphic-Strings" class="headerlink" title="205 Isomorphic Strings"></a>205 Isomorphic Strings</h5><p>209 和 205 同思路，同方法</p>
<p><strong>Solution 1:</strong></p>
<p><code>s</code>=”foo”</p>
<p><code>t</code>=”bar”</p>
<p>check={ f:true, o:true}</p>
<p>dic={ f:b, o:a}</p>
<p>When i =index2 </p>
<p>o and r return false, since o is already in check</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isIsomorphic</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        dic=&#123;&#125;</span><br><span class="line">        check=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">if</span> dic[s[i]]!=t[i]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> t[i] <span class="keyword">in</span> check:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                dic[s[i]]=t[i]</span><br><span class="line">                check[t[i]]=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p><strong>solution 3:</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> len(set(zip(s, t))) == len(set(s)) == len(set(t))</span><br></pre></td></tr></table></figure>

<p>python <strong>zip() 用法</strong></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
</search>
